package com.harikiran.pgmgmt.model;

import java.time.Instant;
import java.util.Date;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

import lombok.Data;

/**
 * Time-series snapshot of room allocation metrics captured by scheduled jobs.
 *
 * <p>
 * Each document records the total capacity, allocated beds and vacancies for a
 * specific day. The {@link com.harikiran.pgmgmt.service.AllocationStatsService}
 * aggregates and persists these snapshots to power the admin dashboard.
 * </p>
 */
@Data
@Document(collection = "allocation_stats")
public class AllocationStats {

	@Id
	/**
	 * Unique identifier generated by MongoDB.
	 */
	private String id;

	/**
	 * Date for which the snapshot was captured. Interpreted in IST by the
	 * scheduler.
	 */
	private Date statsDate;

	/**
	 * Total bed count available across all rooms on {@link #statsDate}.
	 */
	private long totalCount;

	/**
	 * Number of beds currently allocated.
	 */
	private long allocatedCount;

	/**
	 * Number of beds remaining vacant.
	 */
	private long vacantCount;

	/**
	 * Timestamp when the snapshot was persisted.
	 */
	private Instant capturedAt;

	/**
	 * Creates an empty snapshot allowing frameworks to populate fields
	 * reflectively.
	 */
	public AllocationStats() {
	}

	/**
	 * Creates a snapshot stub for the given date which is later populated with
	 * allocation counts.
	 *
	 * @param statsDate day of the snapshot
	 */
	public AllocationStats(Date statsDate) {
		this.statsDate = statsDate;
	}

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public Date getStatsDate() {
		return statsDate;
	}

	public void setStatsDate(Date statsDate) {
		this.statsDate = statsDate;
	}

	public long getTotalCount() {
		return totalCount;
	}

	public void setTotalCount(long totalCount) {
		this.totalCount = totalCount;
	}

	public long getAllocatedCount() {
		return allocatedCount;
	}

	public void setAllocatedCount(long allocatedCount) {
		this.allocatedCount = allocatedCount;
	}

	public long getVacantCount() {
		return vacantCount;
	}

	public void setVacantCount(long vacantCount) {
		this.vacantCount = vacantCount;
	}

	public Instant getCapturedAt() {
		return capturedAt;
	}

	public void setCapturedAt(Instant capturedAt) {
		this.capturedAt = capturedAt;
	}

}
